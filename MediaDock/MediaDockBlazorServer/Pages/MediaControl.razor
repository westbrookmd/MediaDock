@page "/MediaControl"

@using MediaDockBlazorServer.Data
@inject IMediaControlsDataAccess media
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;

<h1>Media Control</h1>

<p>This is a way to control media on your computer.</p>

@if (media == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>The media is currently @isPlayingDisplay. The volume is @volume.</p>
    <div class="btn-group" role="group" aria-label="Media Controls">
        <button class="btn btn-outline-primary" @onclick="Previous">Previous</button>
        <button class="btn btn-outline-primary" @onclick="ToggleIsPlaying">@btnPlayingDisplay</button>
        <button class="btn btn-outline-primary" @onclick="Next">Next</button>
    </div>
}

@code {
    public bool isPlaying;
    public string isPlayingDisplay;
    public string btnPlayingDisplay;
    private float volume;


    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();
    private string _hubUrl;
    private HubConnection _hubConnection;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        isPlayingDisplay = media.GetPlayingStatus();
        isPlaying = media.isPlaying;
        SetPlayingButton();
        volume = media.GetVolume();
    }
    private void ToggleIsPlaying()
    {
        media.SetPlayingStatus(!isPlaying);
        isPlaying = media.isPlaying;
        SetPlayingButton();
        isPlayingDisplay = media.GetPlayingStatus();
    }
    private void SetPlayingButton()
    {
        if(isPlaying)
        {
            btnPlayingDisplay = "Pause";
        }
        else
        {
            btnPlayingDisplay = "Play";
        }
    }
    private void Previous()
    {
        media.PreviousSong();
    }
    private void Next()
    {
        media.NextSong();
    }
    public async Task Chat()
    {
        string baseUrl = navigationManager.BaseUri;

        _hubUrl = baseUrl.TrimEnd('/') + MediaControlsHub.HubUrl;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

        _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

        await _hubConnection.StartAsync();

        await SendAsync($"[Notice] {_username} joined chat room.");
    }
    public void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }
    
    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
