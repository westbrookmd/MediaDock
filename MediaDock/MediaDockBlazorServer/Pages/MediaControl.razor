@page "/MediaControl"
@using MediaDockBlazorServer.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigationManager
@inject IMediaControlsDataAccess _media

<h1>Media Control</h1>

<p>This is a way to control media on your computer.</p>

@if (_media == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>The media is currently @isPlayingDisplay. The volume is @volume.</p>
    <div class="btn-group" role="group" aria-label="Media Controls">
        <button class="btn btn-outline-primary" @onclick="Previous">Previous</button>
        <button class="btn btn-outline-primary" @onclick="ToggleIsPlaying">@btnPlayingDisplay</button>
        <button class="btn btn-outline-primary" @onclick="Next">Next</button>
                <button class="btn btn-outline-primary" @onclick="@MediaChat">StartChat</button>

        <input type="range" @onclick="ChangeVolume" @bind-value="volume">
    </div>
}

@code {
    public bool isPlaying;
    public string isPlayingDisplay;
    public string btnPlayingDisplay;
    private float volume;

    private string _hubUrl;
    private HubConnection _hubConnection;
    Random random = new Random();
    private string _name;

    public async Task MediaChat()
    {
        _hubConnection = new HubConnectionBuilder()
                .WithUrl( navigationManager.BaseUri.TrimEnd('/') + "/media")
                .Build();

        _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

        await _hubConnection.StartAsync();
    }
    private void BroadcastMessage(string name, string message)
    {
        //bool isMine = name.Equals("test");
        Console.WriteLine(name + " just sent " + message);
        //_messages.Add(new Message(name, message, isMine));
        if(message.Contains("volume: "))
        {
            int newVolumeIndex = message.IndexOf(" ");
            float newVolume = float.Parse(message.Substring(newVolumeIndex));
            volume = newVolume;
        }
        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        isPlayingDisplay = _media.GetPlayingStatus();
        isPlaying = _media.isPlaying;
        SetPlayingButton();
        volume = _media.GetVolume();
        _name = random.Next().ToString();
    }
    private void ToggleIsPlaying()
    {
        _media.SetPlayingStatus(!isPlaying);
        isPlaying = _media.isPlaying;
        SetPlayingButton();
        isPlayingDisplay = _media.GetPlayingStatus();
    }
    private void SetPlayingButton()
    {
        if(isPlaying)
        {
            btnPlayingDisplay = "Pause";
        }
        else
        {
            btnPlayingDisplay = "Play";
        }
    }
    private void Previous()
    {
        _media.PreviousSong();
    }
    private void Next()
    {
        _media.NextSong();
    }
    private async Task ChangeVolume()
    {
        _media.SetVolume(volume);
        await SendAsync("volume: " + volume);
    }

        private async Task SendAsync(string message)
    {
            await _hubConnection.SendAsync("Broadcast", _name, message);

    }
}
